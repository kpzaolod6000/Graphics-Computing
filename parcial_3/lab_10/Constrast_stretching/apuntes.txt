diferentes maneras de set una imagen en gris
# img = cv2.imread('../squareGris.jpg', cv2.IMREAD_UNCHANGED);
# img = cv2.imread('../dama.JPG',0)

#condiciones de bit

# if(img.dtype == 'uint8'):
# elif(img.dtype == 'uint16'):
# elif(img.dtype == 'uint16'): 
#     print(img.dtype)
#print(img[0,0])



#de gray a bgr no sale :(
# backtorgb = cv2.cvtColor(img,cv2.COLOR_GRAY2BGR) 
# cv2.imshow('Imagen a Color',backtorgb)


#histogramas por separado
# plt.hist(img.ravel(),256,[0,256])
# plt.xlabel('intensidad')
# plt.ylabel('cantidad de pixeles')

# plt.hist(updateImg.ravel(),256,[0,256])
# plt.xlabel('intensidad')
# plt.ylabel('cantidad de pixeles')

#otra forma de convertir matriz en array
arrayImg = img.flatten()


#outliers


# imgAux = img 

# for i in range(20):
#     for j in range(20):
#         imgAux[i][j] = 0
# # img[0][0] = 0
# print(imgAux)
# cv2.imshow('Imagen real con outlier',imgAux)
# ax3.hist(imgAux.ravel(),256,[0,256])
# ax3.set_title('Imagen Original con outlier')
# ax3.set_xlabel('Intensidad')
# ax3.set_ylabel('Cantidad de pixeles')
# updateImgOutlier = PixelOperations(imgAux)
# updateImgOutlier = cv2.merge((updateImgOutlier,updateImgOutlier,updateImgOutlier))
# updateImgOutlier= np.array(updateImgOutlier, dtype=np.uint8)
# cv2.imshow('Imagen Contrast Stretching con outlier',updateImgOutlier)
# ax4.hist(updateImgOutlier.ravel(),256,[0,256])
# ax4.set_title('Imagen Contrast Stretching con outlier')
# ax4.set_xlabel('Intensidad')2
# ax4.set_ylabel('Cantidad de pixeles')

# print(len(imgAux))
# arrayImg = imgAux.flatten()
# sortArray = np.sort(arrayImg)
# #5% y el 95 %
# c = sortArray[int(len(sortArray)*0.05)]
# d = sortArray[int(len(sortArray)*0.95)]
# print(type(c))
# print(type(d))
# print(type(imgAux[0][0]))
# # c = sortArray[0]
# # d = sortArray[len(sortArray)-1]
# updateImg = PixelOperations(imgAux,c,d,int(len(imgAux)*0.05),int(len(imgAux)*0.95))
# # updateImg = cv2.merge((updateImg,updateImg,updateImg))
# # updateImg = np.array(updateImg, dtype=np.uint8)
# cv2.imshow('Imagen real',img)
# cv2.imshow('Imagen Constrast Stretching', updateImg)



#THRESHOLDING
CON UN DIAGRAMA FEO DIAGRAMA QUE USA RGB
imgReal = cv2.imread("tejidos2.JPG", 1) #8 bit por escala de grises
# imgReal = cv2.resize(imgReal,(600,600))
img = imgReal


# display the merged images
cv2.imshow('Image Original', img)
B, G, R = cv2.split(img)


color = ('b','g','r')

for i, c in enumerate(color):
    hist = cv2.calcHist([img], [i], None, [256], [0, 256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
print(B)
print(len(B))
thresholding = getThresholding(B,180, np.arange(0,0))
thresholding = np.reshape(thresholding,(len(B),len(B[0])))
print(thresholding)
print(len(thresholding))
img_GRAY = cv2.merge((thresholding,thresholding,thresholding))
img_GRAY = np.array(img_GRAY, dtype=np.uint8)
cv2.imshow('Image Thresholding', img_GRAY)



plt.show()
cv2.waitKey(0)
cv2.destroyAllWindows() 


#agregando y obteniendo un arreglo agreagado con row_aux
thresholding = np.append(thresholding,row_aux)
        

# para crear una matriz uint8

# thresholding = getThresholding(B,180, np.arange(0,0))
# thresholding = np.reshape(thresholding,(len(B),len(B[0])))
# print(thresholding)
# print(len(thresholding))
# img_GRAY = cv2.merge((thresholding,thresholding,thresholding))
# img_GRAY = np.array(img_GRAY, dtype=np.uint8)
# cv2.imshow('Image Thresholding', img_GRAY)

#otra forma de hallar un diagrama
hist = cv2.calcHist([img], [0], None, [256], [0, 256])
plt.plot(hist, color='red' )


#===================================================================================================
# Histograma de la imagen real
#===================================================================================================
plt.hist(img.ravel(),256,[0,256])
plt.title('Imagen Original 1')
plt.xlabel('Intensidad')
plt.xlabel('Cantidad de pixeles')
plt.show()
