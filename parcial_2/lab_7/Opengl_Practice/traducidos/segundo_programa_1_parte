Sombreadores de vértices y fragmentos
Nuestro primer programa OpenGL en realidad no dibujó nada, simplemente llenó el búfer de color con un solo color. Para realmente dibujar algo, necesitamos incluir un sombreador de vértices y un sombreador de fragmentos.
Es posible que se sorprenda al saber que OpenGL es capaz de dibujar solo algunos tipos de cosas muy simples, como puntos, líneas o triángulos. Estas cosas simples se denominan primitivas y, por esta razón, la mayoría de los modelos 3D se componen de montones y montones de primitivos, generalmente triángulos.
Las primitivas están formadas por vértices; por ejemplo, un triángulo consta de tres vértices. Los vértices pueden provenir de una variedad de fuentes: pueden leerse desde archivos y luego cargarse en búferes mediante la aplicación C ++ / OpenGL, o pueden estar codificados en el código C ++ o incluso en el código GLSL.

Antes de que algo de esto pueda suceder, la aplicación C ++ / OpenGL debe compilar y vincular los programas de sombreado de fragmentos y vértices GLSL apropiados, y luego cargarlos en la canalización. Veremos los comandos para hacer esto en breve.
La aplicación C ++ / OpenGL también es responsable de decirle a OpenGL que construya triángulos. Hacemos esto usando la siguiente función OpenGL:

El modo es el tipo de primitiva; para los triángulos usamos GL_TRIANGLES. El parámetro "primero" indica con qué vértice comenzar (generalmente el vértice número 0, el primero), y count especifica el número total de vértices que se dibujarán.
Cuando se llama a glDrawArrays (), el código GLSL en la canalización comienza a ejecutarse.
Ahora agreguemos algo de código GLSL a esa canalización. Independientemente de dónde se originen, todos los vértices pasan por el sombreador de vértices. Lo hacen uno por uno; es decir, el sombreador se ejecuta una vez por vértice. Para un modelo grande y complejo con muchos vértices, el sombreador de vértices puede ejecutarse cientos, miles o incluso millones de veces, a menudo en paralelo.
Escribamos un programa simple con un solo vértice, codificado en el sombreador de vértices. Eso no es suficiente para dibujar un triángulo, pero es suficiente para dibujar un punto. Para que se muestre, también necesitamos proporcionar un sombreador de fragmentos. Para simplificar, declararemos los dos programas de sombreado como matrices de cadenas.


El programa parece tener una ventana en blanco (ver Figura 2.4). Pero un examen detenido revela un pequeño punto azul en el centro de la ventana (suponiendo que esta página impresa tenga la resolución suficiente). El tamaño predeterminado de un punto en OpenGL es un píxel.
Hay muchos detalles importantes en el Programa 2.2 (codificados por colores en el programa, para mayor comodidad) para que los analicemos. En primer lugar, tenga en cuenta el uso frecuente de "GLuint": esta es una abreviatura independiente de la plataforma para
"Unsigned int", proporcionado por OpenGL (muchas construcciones de OpenGL tienen referencias enteras). A continuación, tenga en cuenta que init () ya no está vacío; ahora llama a otra función llamada "createShaderProgram ()" (que escribimos). Esta función comienza declarando dos sombreadores como cadenas de caracteres llamadas vshaderSource y fshaderSource. Luego llama a glCreateShader () dos veces, lo que genera los dos sombreadores de tipos GL_VERTEX_SHADER y GL_FRAGMENT_SHADER. OpenGL crea cada objeto de sombreado (inicialmente vacío) y devuelve un ID de número entero para cada uno de los que es un índice para referenciarlo más tarde, nuestro código almacena este ID en las variables vShader y fShader. Luego llama a glShaderSource (), que carga el código GLSL de las cadenas en los objetos de sombreado vacíos.
Luego, cada uno de los sombreadores se compila utilizando glCompileShader (). glShaderSource () tiene cuatro parámetros: (a) el objeto sombreador en el que almacenar el sombreador, (b) el número de cadenas en el código fuente del sombreador, (c) una matriz de punteros a cadenas que contienen el código fuente y (d ) un parámetro adicional que no estamos usando (se explicará más adelante, en las notas complementarias del capítulo). Tenga en cuenta que las dos llamadas especifican el número de líneas de código en cada sombreador como "1"; esto también se explica en las notas complementarias.
Luego, la aplicación crea un objeto de programa llamado vfProgram y guarda el ID entero que apunta a él. Un objeto de "programa" OpenGL contiene una serie de sombreadores compilados, y aquí vemos los siguientes comandos: glCreateProgram () para crear el objeto de programa, glAttachShader () para adjuntar cada uno de los sombreadores y luego glLinkProgram () para solicitar el compilador GLSL se asegura de que sean compatibles.
